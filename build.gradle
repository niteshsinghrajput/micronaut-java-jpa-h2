plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.4.4"
    id("io.micronaut.aot") version "4.4.4"
}

version = "0.1"
group = "com.nitesh"

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    implementation("io.micronaut.data:micronaut-data-jpa")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut:micronaut-http-server")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut:micronaut-validation:3.9.4")
    implementation("jakarta.validation:jakarta.validation-api:3.0.2")
    compileOnly("io.micronaut:micronaut-http-client")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("com.h2database:h2")
    testImplementation("io.micronaut:micronaut-http-client")
}

application {
    mainClass = "com.nitesh.Application"
}

java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}

graalvmNative.toolchainDetection = false

micronaut {
    version = "4.7.3"
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.nitesh.*")
    }
    aot {
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
    }
}

shadowJar {
    archiveBaseName.set("app")  // Set output JAR as "app.jar"
    archiveClassifier.set("")   // Removes "-all" suffix
    archiveVersion.set("")      // No version in filename
}

tasks.named("build") {
    dependsOn("shadowJar")  // Ensure shadowJar runs when building
}

tasks.register("copyResources", Copy) {
    from "src/main/resources"
    into "build/resources"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE  // ✅ Handle duplicate files safely
}

tasks.named("processResources") {
    dependsOn("copyResources")  // ✅ Ensure resources are copied before processing
}

tasks.named("dockerfileNative") {
    jdkVersion = "21"
}
